// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, XeLatex, fs, mu, path, render, rmdir, spawn, temp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  spawn = require('child_process').spawn;

  EventEmitter = require('events').EventEmitter;

  temp = require('temp');

  mu = require('mu2');

  XeLatex = (function(_super) {

    __extends(XeLatex, _super);

    function XeLatex(outputDirectory) {
      this.outputDirectory = outputDirectory;
    }

    XeLatex.prototype.process = function(file) {
      var xelatex,
        _this = this;
      xelatex = spawn('xelatex', ['-interaction', 'nonstopmode', '-output-directory', this.outputDirectory, file]);
      return xelatex.on('exit', function(code) {
        var filename;
        if (code === 0) {
          filename = path.basename(file, '.tex');
          return _this.emit('done', path.join(_this.outputDirectory, "" + filename + ".pdf"));
        } else {
          return _this.emit('error', new Error("xelatex exits with " + code));
        }
      });
    };

    return XeLatex;

  })(EventEmitter);

  rmdir = function(dir, callback) {
    return fs.readdir(dir, function(err, files) {
      var file, filename, removedFiles, _i, _len, _results;
      if (err) {
        return callback(err);
      }
      removedFiles = 0;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        filename = files[_i];
        file = path.join(dir, filename);
        _results.push(fs.unlink(file, function() {
          removedFiles += 1;
          if (removedFiles === files.length) {
            return fs.rmdir(dir, callback);
          }
        }));
      }
      return _results;
    });
  };

  render = function(source, data, callback) {
    var rs;
    rs = mu.compileAndRender(source, data);
    return temp.mkdir('xelatex', function(err, dirPath) {
      var ws;
      ws = fs.createWriteStream(path.join(dirPath, 'output.tex'));
      rs.pipe(ws);
      return ws.on('close', function() {
        var xelatex;
        xelatex = new XeLatex(dirPath);
        xelatex.process(path.join(dirPath, 'output.tex'));
        xelatex.on('done', function(path) {
          var readStream;
          readStream = fs.createReadStream(path);
          readStream.on('end', function() {
            return rmdir(dirPath, function() {});
          });
          return callback(null, readStream);
        });
        return xelatex.on('error', function(err) {
          return callback(err);
        });
      });
    });
  };

  module.exports = {
    XeLatex: XeLatex,
    render: render
  };

}).call(this);
